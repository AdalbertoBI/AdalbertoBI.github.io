// WhatIntegra - WhatsApp Integration
// M√≥dulo para integra√ß√£o com WhatsApp Web via WebSocket

(() => {
  // === CONFIGURA√á√ïES USANDO NAMESPACE GLOBAL ===
  const getConfig = () => window.WhatIntegra?.config || {};
  const API_URL = () => getConfig().API_URL || 'https://127.0.0.1:8766/api';
  const SOCKET_URL = () => getConfig().WHATSAPP_URL || 'https://127.0.0.1:3002';
  
  // === ESTADO ===
  let socket = null;
  let currentChat = null;
  let chats = [];
  let messages = {};

  // === ELEMENTOS DOM ===
  const qrScreen = document.getElementById('qrScreen');
  const mainInterface = document.getElementById('mainInterface');
  const welcomeScreen = document.getElementById('welcomeScreen');
  const chatContainer = document.getElementById('chatContainer');
  const connectionStatus = document.getElementById('connectionStatus');
  const statusText = document.getElementById('statusText');
  const qrCodeEl = document.getElementById('qrCode');
  const chatsListEl = document.getElementById('chatsList');
  const messagesArea = document.getElementById('messagesArea');
  const messageInput = document.getElementById('messageInput');
  const sendBtn = document.getElementById('sendBtn');
  const chatName = document.getElementById('chatName');
  const chatStatus = document.getElementById('chatStatus');

  function setLoading(loading, button = loginBtn) {
    if (!button) return;
    button.disabled = loading;
    const originalText = button.dataset.originalText || button.textContent;
    button.dataset.originalText = originalText;
    button.textContent = loading ? 'Aguarde...' : originalText;
  }

  function showMixedContentWarning() {
    if (isGitHubPages) {
      const warningMsg = document.createElement('div');
      warningMsg.innerHTML = `
        <strong>‚ö†Ô∏è Configura√ß√£o Necess√°ria</strong><br>
        Para usar o WhatsApp Web, voc√™ precisa primeiro autorizar o servidor local:<br><br>
        1. <a href="http://127.0.0.1:8765/api/health" target="_blank" style="color: #f59e0b;">Clique aqui para abrir o servidor local</a><br>
        2. Se aparecer um aviso de seguran√ßa, clique em "Avan√ßado" ‚Üí "Continuar"<br>
        3. Volte aqui e tente fazer login novamente<br><br>
        <small>Isso √© necess√°rio porque o GitHub Pages usa HTTPS e o servidor local usa HTTP.</small>
      `;
      statusEl.innerHTML = '';
      statusEl.appendChild(warningMsg);
      statusEl.className = 'status warning';
      return true;
    }
    return false;
  }

  function formatTime(timestamp) {
    const date = new Date(timestamp * 1000);
    return date.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
  }

  function formatChatTime(timestamp) {
    const date = new Date(timestamp * 1000);
    const now = new Date();
    const diff = now - date;
    
    if (diff < 24 * 60 * 60 * 1000) { // Menos de 24 horas
      return date.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
    } else if (diff < 7 * 24 * 60 * 60 * 1000) { // Menos de 7 dias
      return date.toLocaleDateString('pt-BR', { weekday: 'short' });
    } else {
      return date.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });
    }
  }

  function getContactName(chatId) {
    if (chatId.endsWith('@g.us')) {
      return 'Grupo';
    }
    // Extrair n√∫mero do ID
    const number = chatId.split('@')[0];
    return number.replace(/(\d{2})(\d{5})(\d{4})/, '+$1 $2-$3');
  }

  function getAvatarEmoji(name) {
    const emojis = ['üë§', 'üë•', 'ü§ù', 'üíº', 'üè†', '‚ù§Ô∏è', 'üåü', 'üí¨', 'üì±', '‚≠ê'];
    let hash = 0;
    for (let i = 0; i < name.length; i++) {
      hash = ((hash << 5) - hash) + name.charCodeAt(i);
      hash = hash & hash; // Convert to 32bit integer
    }
    return emojis[Math.abs(hash) % emojis.length];
  }

  // === AUTHENTICATION ===

  async function trySession() {
    const user = localStorage.getItem('wi_user');
    const token = localStorage.getItem('wi_token');
    
    if (!user || !token) return false;
    
    try {
      const res = await fetch(`${API_URL()}/session`, {
        headers: { 'Authorization': `Bearer ${token}` },
      });
      
      if (res.ok) {
        currentUser = user;
        currentToken = token;
        window.WhatIntegra.ui?.showWhatsAppInterface();
        return true;
      } else {
        localStorage.removeItem('wi_user');
        localStorage.removeItem('wi_token');
        return false;
      }
    } catch (error) {
      console.log('Servidor n√£o acess√≠vel:', error);
      return false;
    }
  }

  async function login(username, password) {
    try {
      const res = await fetch(`${API_URL()}/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password })
      });

      const data = await res.json().catch(() => ({}));
      
      if (!res.ok) {
        throw new Error(data?.error || 'Falha no login');
      }

      const { token } = data;
      localStorage.setItem('wi_user', username);
      localStorage.setItem('wi_token', token);
      
      currentUser = username;
      currentToken = token;
      
      setStatus('Autenticado com sucesso!', 'success');
      setTimeout(() => window.WhatIntegra.ui?.showWhatsAppInterface(), 500);
      
    } catch (err) {
      throw new Error(err.message || 'Erro ao autenticar');
    }
  }

  function logout() {
    localStorage.removeItem('wi_user');
    localStorage.removeItem('wi_token');
    currentUser = null;
    currentToken = null;
    
    if (socket) {
      socket.disconnect();
      socket = null;
    }
    
    window.WhatIntegra.ui?.showLoginScreen();
  }

  // === WHATSAPP CONNECTION ===

  function connectWebSocket() {
    if (socket) {
      socket.disconnect();
    }

    socket = io(SOCKET_URL(), {
      transports: ['websocket', 'polling'],
      timeout: 5000
    });

    socket.on('connect', () => {
      console.log('‚úÖ WebSocket conectado');
      updateConnectionStatus('connecting', 'Conectando WhatsApp...');
    });

    socket.on('disconnect', () => {
      console.log('üîå WebSocket desconectado');
      updateConnectionStatus('disconnected', 'Desconectado');
    });

    socket.on('whatsapp:status', (data) => {
      console.log('üì± Status WhatsApp:', data);
      handleWhatsAppStatus(data);
    });

    socket.on('whatsapp:qr', (data) => {
      console.log('üì± QR Code recebido');
      showQRCode(data.qr);
    });

    socket.on('whatsapp:message', (message) => {
      console.log('üì® Nova mensagem:', message);
      handleNewMessage(message);
    });

    socket.on('whatsapp:chats', (newChats) => {
      console.log('üí¨ Chats atualizados:', newChats.length);
      chats = newChats;
      renderChats();
    });
  }

  function handleWhatsAppStatus(data) {
    const { status, chats: newChats, qr } = data;

    switch (status) {
      case 'connected':
        updateConnectionStatus('connected', 'Conectado');
        if (newChats) {
          chats = newChats;
          renderChats();
        }
        showMainInterface();
        break;
        
      case 'qr':
        updateConnectionStatus('connecting', 'Aguardando QR Code...');
        if (qr) showQRCode(qr);
        showQRScreen();
        break;
        
      case 'disconnected':
        updateConnectionStatus('disconnected', 'Desconectado');
        showQRScreen();
        break;
        
      case 'auth_failure':
        updateConnectionStatus('disconnected', 'Erro de autentica√ß√£o');
        showQRScreen();
        break;
        
      default:
        updateConnectionStatus('connecting', 'Inicializando...');
    }
  }

  function updateConnectionStatus(status, text) {
    const statusDot = connectionStatus.querySelector('.status-dot');
    statusText.textContent = text;
    
    statusDot.className = 'status-dot';
    statusDot.classList.add(status);
  }

  function showQRCode(qrDataUrl) {
    qrCodeEl.innerHTML = `<img src="${qrDataUrl}" alt="QR Code WhatsApp" style="width: 256px; height: 256px;">`;
  }

  async function restartWhatsApp() {
    if (!currentToken) return;
    
    try {
      setLoading(true, restartBtn);
      const res = await fetch(`${API_URL()}/whatsapp/restart`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${currentToken}` }
      });
      
      if (res.ok) {
        updateConnectionStatus('connecting', 'Reiniciando...');
        showQRScreen();
      }
    } catch (error) {
      console.error('Erro ao reiniciar WhatsApp:', error);
    } finally {
      setLoading(false, restartBtn);
    }
  }

  // === CHAT MANAGEMENT ===

  function renderChats() {
    if (!chatsListEl) return;

    if (chats.length === 0) {
      chatsListEl.innerHTML = `
        <div class="loading-chats">
          <span>Nenhuma conversa encontrada</span>
        </div>
      `;
      return;
    }

    chatsListEl.innerHTML = chats.map(chat => `
      <div class="chat-item" data-chat-id="${chat.id}">
        <div class="chat-avatar">${getAvatarEmoji(chat.name)}</div>
        <div class="chat-info">
          <div class="chat-name">${chat.name || getContactName(chat.id)}</div>
          <div class="chat-last-message">
            ${chat.lastMessage ? (chat.lastMessage.fromMe ? 'Voc√™: ' : '') + chat.lastMessage.body : 'Nenhuma mensagem'}
          </div>
        </div>
        <div class="chat-meta">
          ${chat.lastMessage ? `<div class="chat-time">${formatChatTime(chat.lastMessage.timestamp)}</div>` : ''}
          ${chat.unreadCount ? `<div class="chat-unread">${chat.unreadCount}</div>` : ''}
        </div>
      </div>
    `).join('');

    // Add click handlers
    chatsListEl.querySelectorAll('.chat-item').forEach(item => {
      item.addEventListener('click', () => {
        const chatId = item.dataset.chatId;
        selectChat(chatId);
      });
    });
  }

  async function selectChat(chatId) {
    const chat = chats.find(c => c.id === chatId);
    if (!chat) return;

    // Update UI
    currentChat = chat;
    chatName.textContent = chat.name || getContactName(chat.id);
    chatStatus.textContent = chat.isGroup ? `${chat.participants || 0} participantes` : 'online';
    
    // Update active chat
    chatsListEl.querySelectorAll('.chat-item').forEach(item => {
      item.classList.toggle('active', item.dataset.chatId === chatId);
    });

    // Load messages
    await loadMessages(chatId);
    showChatContainer();
  }

  async function loadMessages(chatId) {
    if (!currentToken) return;

    try {
      messagesArea.innerHTML = `
        <div class="loading-messages">
          <div class="spinner"></div>
          <span>Carregando mensagens...</span>
        </div>
      `;

      const res = await fetch(`${API_URL()}/whatsapp/chat/${encodeURIComponent(chatId)}/messages?limit=50`, {
        headers: { 'Authorization': `Bearer ${currentToken}` }
      });

      const data = await res.json();
      
      if (res.ok) {
        messages[chatId] = data.messages || [];
        renderMessages(chatId);
      } else {
        messagesArea.innerHTML = `
          <div class="loading-messages">
            <span>Erro ao carregar mensagens</span>
          </div>
        `;
      }
    } catch (error) {
      console.error('Erro ao carregar mensagens:', error);
      messagesArea.innerHTML = `
        <div class="loading-messages">
          <span>Erro de conex√£o</span>
        </div>
      `;
    }
  }

  function renderMessages(chatId) {
    const chatMessages = messages[chatId] || [];
    
    if (chatMessages.length === 0) {
      messagesArea.innerHTML = `
        <div class="loading-messages">
          <span>Nenhuma mensagem ainda</span>
        </div>
      `;
      return;
    }

    messagesArea.innerHTML = chatMessages.map(msg => `
      <div class="message ${msg.fromMe ? 'from-me' : 'from-other'}">
        <div class="message-body">${msg.body}</div>
        <div class="message-meta">
          <span class="message-time">${formatTime(msg.timestamp)}</span>
          ${msg.fromMe ? '<span class="message-status">‚úì‚úì</span>' : ''}
        </div>
      </div>
    `).join('');

    // Scroll to bottom
    messagesArea.scrollTop = messagesArea.scrollHeight;
  }

  function handleNewMessage(message) {
    const chatId = message.chatId;
    
    // Update messages
    if (!messages[chatId]) {
      messages[chatId] = [];
    }
    messages[chatId].push(message);

    // If current chat, update view
    if (currentChat && currentChat.id === chatId) {
      renderMessages(chatId);
    }

    // Update chat list (move to top and update last message)
    const chatIndex = chats.findIndex(c => c.id === chatId);
    if (chatIndex !== -1) {
      const chat = chats[chatIndex];
      chat.lastMessage = {
        body: message.body,
        timestamp: message.timestamp,
        fromMe: message.fromMe
      };
      
      // Move to top
      chats.splice(chatIndex, 1);
      chats.unshift(chat);
      renderChats();
    }
  }

  async function sendMessage(text) {
    if (!currentChat || !currentToken || !text.trim()) return;

    try {
      setLoading(true, sendBtn);
      
      const res = await fetch(`${API_URL()}/whatsapp/send`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${currentToken}`
        },
        body: JSON.stringify({
          to: currentChat.id,
          message: text.trim()
        })
      });

      if (res.ok) {
        messageInput.value = '';
        
        // Add message locally for immediate feedback
        const localMessage = {
          id: 'temp_' + Date.now(),
          body: text.trim(),
          fromMe: true,
          timestamp: Math.floor(Date.now() / 1000),
          type: 'chat'
        };
        
        handleNewMessage({ ...localMessage, chatId: currentChat.id });
      } else {
        const error = await res.json().catch(() => ({}));
        alert('Erro ao enviar mensagem: ' + (error.error || 'Erro desconhecido'));
      }
    } catch (error) {
      console.error('Erro ao enviar mensagem:', error);
      alert('Erro de conex√£o ao enviar mensagem');
    } finally {
      setLoading(false, sendBtn);
    }
  }

  // === SCREEN MANAGEMENT ===

  function showLoginScreen() {
    loginScreen.classList.remove('hidden');
    whatsappScreen.classList.add('hidden');
  }

  function showWhatsAppInterface() {
    loginScreen.classList.add('hidden');
    whatsappScreen.classList.remove('hidden');
    
    if (displayUser) displayUser.textContent = currentUser;
    
    // Connect WebSocket
    connectWebSocket();
  }

  function showQRScreen() {
    qrScreen.classList.remove('hidden');
    mainInterface.classList.add('hidden');
  }

  function showMainInterface() {
    qrScreen.classList.add('hidden');
    mainInterface.classList.remove('hidden');
    welcomeScreen.classList.remove('hidden');
    chatContainer.classList.add('hidden');
  }

  function showChatContainer() {
    welcomeScreen.classList.add('hidden');
    chatContainer.classList.remove('hidden');
  }

  // === EVENT LISTENERS ===

  // Login form
  loginForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (showMixedContentWarning()) {
      setLoading(false);
      return;
    }
    
    setStatus('Validando credenciais‚Ä¶');
    setLoading(true);
    
    try {
      const username = document.getElementById('username').value.trim();
      const password = document.getElementById('password').value;
      
      await login(username, password);
    } catch (err) {
      setStatus(err.message || 'Erro ao autenticar', 'error');
    } finally {
      setLoading(false);
    }
  });

  // WhatsApp controls
  restartBtn?.addEventListener('click', restartWhatsApp);
  logoutBtn?.addEventListener('click', logout);

  // Message input
  messageInput?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage(messageInput.value);
    }
  });

  sendBtn?.addEventListener('click', () => {
    sendMessage(messageInput.value);
  });

  // Search chats
  document.getElementById('searchChats')?.addEventListener('input', (e) => {
    const query = e.target.value.toLowerCase();
    const chatItems = chatsListEl?.querySelectorAll('.chat-item');
    
    chatItems?.forEach(item => {
      const chatName = item.querySelector('.chat-name')?.textContent.toLowerCase() || '';
      item.style.display = chatName.includes(query) ? 'flex' : 'none';
    });
  });

  // === INICIALIZA√á√ÉO E EXPORT PARA NAMESPACE GLOBAL ===

  // Adicionar fun√ß√µes ao namespace global do WhatIntegra
  window.WhatIntegra = window.WhatIntegra || {};
  window.WhatIntegra.whatsapp = {
    connectWebSocket,
    socket: () => socket,
    currentChat: () => currentChat,
    chats: () => chats,
    messages: () => messages
  };

  console.log('‚úÖ M√≥dulo WhatsApp carregado e exportado para namespace global');

})();